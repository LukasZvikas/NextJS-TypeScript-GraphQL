import { ComponentType } from 'react';
import { MittEmitter } from '../mitt';
import { NextPageContext } from '../utils';
export declare type BaseRouter = {
    route: string;
    pathname: string;
    query: string;
    asPath: string;
};
declare type RouteInfo = {
    Component: ComponentType;
    props?: any;
    err?: Error;
    error?: any;
};
declare type Subscription = (data: {
    App?: ComponentType;
} & RouteInfo) => void;
declare type BeforePopStateCallback = (state: any) => boolean;
export default class Router implements BaseRouter {
    route: string;
    pathname: string;
    query: string;
    asPath: string;
    components: {
        [pathname: string]: RouteInfo;
    };
    subscriptions: Set<Subscription>;
    componentLoadCancel: (() => void) | null;
    pageLoader: any;
    _bps: BeforePopStateCallback | undefined;
    static events: MittEmitter;
    constructor(pathname: string, query: any, as: string, { initialProps, pageLoader, App, Component, err }: {
        initialProps: any;
        pageLoader: any;
        Component: ComponentType;
        App: ComponentType;
        err?: Error;
    });
    static _rewriteUrlForNextExport(url: string): string;
    onPopState: (e: PopStateEvent) => void;
    update(route: string, Component: ComponentType): void;
    reload(): void;
    back(): void;
    push(url: string, as?: string, options?: {}): Promise<boolean>;
    replace(url: string, as?: string, options?: {}): Promise<boolean>;
    change(method: string, _url: string, _as: string, options: any): Promise<boolean>;
    changeState(method: string, url: string, as: string, options?: {}): void;
    getRouteInfo(route: string, pathname: string, query: any, as: string, shallow?: boolean): Promise<RouteInfo>;
    set(route: string, pathname: string, query: any, as: string, data: RouteInfo): void;
    beforePopState(cb: BeforePopStateCallback): void;
    onlyAHashChange(as: string): boolean;
    scrollToHash(as: string): void;
    urlIsNew(asPath: string): boolean;
    prefetch(url: string): Promise<void>;
    fetchComponent(route: string): Promise<ComponentType>;
    getInitialProps(Component: ComponentType, ctx: NextPageContext): Promise<any>;
    abortComponentLoad(as: string): void;
    notify(data: RouteInfo): void;
    subscribe(fn: Subscription): () => void;
}
export {};
