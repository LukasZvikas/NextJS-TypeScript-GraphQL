import React, { ErrorInfo } from 'react';
import PropTypes from 'prop-types';
import { AppContextType, AppInitialProps, AppPropsType } from 'next-server/dist/lib/utils';
import { Router } from '../client/router';
export { AppInitialProps };
export declare type AppContext = AppContextType<Router>;
export declare type AppProps<P = {}> = AppPropsType<Router, P>;
export default class App<P = {}, CP = P> extends React.Component<P & AppProps<CP>> {
    static childContextTypes: {
        router: PropTypes.Requireable<object>;
    };
    static getInitialProps({ Component, ctx }: AppContext): Promise<AppInitialProps>;
    getChildContext(): {
        router: import("../client/router").PublicRouterInstance;
    };
    componentDidCatch(error: Error, _errorInfo: ErrorInfo): void;
    render(): JSX.Element;
}
export declare class Container extends React.Component {
    componentDidMount(): void;
    componentDidUpdate(): void;
    private scrollToHash;
    render(): React.ReactNode;
}
export declare function createUrl(router: Router): {
    readonly query: string;
    readonly pathname: string;
    readonly asPath: string;
    back: () => void;
    push: (url: string, as?: string | undefined) => Promise<boolean>;
    pushTo: (href: string, as?: string | undefined) => Promise<boolean>;
    replace: (url: string, as?: string | undefined) => Promise<boolean>;
    replaceTo: (href: string, as?: string | undefined) => Promise<boolean>;
};
