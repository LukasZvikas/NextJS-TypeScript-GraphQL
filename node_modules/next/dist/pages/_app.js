"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=true;exports.createUrl=createUrl;exports.Container=exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));var _utils=require("next-server/dist/lib/utils");exports.AppInitialProps=_utils.AppInitialProps;var _router=require("../client/router");class App extends _react.default.Component{static async getInitialProps({Component,ctx}){const pageProps=await(0,_utils.loadGetInitialProps)(Component,ctx);return{pageProps};}getChildContext(){return{router:(0,_router.makePublicRouterInstance)(this.props.router)};}// Kept here for backwards compatibility.
// When someone ended App they could call `super.componentDidCatch`.
// @deprecated This method is no longer needed. Errors are caught at the top level
componentDidCatch(error,_errorInfo){throw error;}render(){const _ref=this.props,router=_ref.router,Component=_ref.Component,pageProps=_ref.pageProps;const url=createUrl(router);return _react.default.createElement(Container,null,_react.default.createElement(Component,(0,_extends2.default)({},pageProps,{url:url})));}}exports.default=App;App.childContextTypes={router:_propTypes.default.object};class Container extends _react.default.Component{componentDidMount(){this.scrollToHash();}componentDidUpdate(){this.scrollToHash();}scrollToHash(){let hash=window.location.hash;hash=hash&&hash.substring(1);if(!hash)return;const el=document.getElementById(hash);if(!el)return;// If we call scrollIntoView() in here without a setTimeout
// it won't scroll properly.
setTimeout(()=>el.scrollIntoView(),0);}render(){return this.props.children;}}exports.Container=Container;const warnUrl=(0,_utils.execOnce)(()=>{if(process.env.NODE_ENV!=='production'){console.error(`Warning: the 'url' property is deprecated. https://err.sh/zeit/next.js/url-deprecated`);}});function createUrl(router){// This is to make sure we don't references the router object at call time
const pathname=router.pathname,asPath=router.asPath,query=router.query;return{get query(){warnUrl();return query;},get pathname(){warnUrl();return pathname;},get asPath(){warnUrl();return asPath;},back:()=>{warnUrl();router.back();},push:(url,as)=>{warnUrl();return router.push(url,as);},pushTo:(href,as)=>{warnUrl();const pushRoute=as?href:'';const pushUrl=as||href;return router.push(pushRoute,pushUrl);},replace:(url,as)=>{warnUrl();return router.replace(url,as);},replaceTo:(href,as)=>{warnUrl();const replaceRoute=as?href:'';const replaceUrl=as||href;return router.replace(replaceRoute,replaceUrl);}};}