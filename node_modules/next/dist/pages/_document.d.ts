import PropTypes from 'prop-types';
import { Component } from 'react';
import { DocumentContext, DocumentInitialProps, DocumentProps } from 'next-server/dist/lib/utils';
export { DocumentContext, DocumentInitialProps, DocumentProps };
export declare type OriginProps = {
    nonce?: string;
    crossOrigin?: string;
};
export declare type DocumentComponentContext = {
    readonly _documentProps: DocumentProps;
    readonly _devOnlyInvalidateCacheQueryString: string;
};
export default class Document<P = {}> extends Component<DocumentProps & P> {
    static childContextTypes: {
        _documentProps: PropTypes.Requireable<any>;
        _devOnlyInvalidateCacheQueryString: PropTypes.Requireable<string>;
    };
    static getInitialProps({ renderPage }: DocumentContext): Promise<DocumentInitialProps>;
    context: DocumentComponentContext;
    getChildContext(): DocumentComponentContext;
    render(): JSX.Element;
}
export declare class Html extends Component {
    static contextTypes: {
        _documentProps: PropTypes.Requireable<any>;
    };
    static propTypes: {
        children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    };
    context: DocumentComponentContext;
    render(): JSX.Element;
}
export declare class Head extends Component<OriginProps> {
    static contextTypes: {
        _documentProps: PropTypes.Requireable<any>;
        _devOnlyInvalidateCacheQueryString: PropTypes.Requireable<string>;
    };
    static propTypes: {
        nonce: PropTypes.Requireable<string>;
        crossOrigin: PropTypes.Requireable<string>;
    };
    context: DocumentComponentContext;
    getCssLinks(): (JSX.Element | null)[] | null;
    getPreloadDynamicChunks(): JSX.Element[];
    getPreloadMainLinks(): (JSX.Element | null)[] | null;
    render(): JSX.Element;
}
export declare class Main extends Component {
    static contextTypes: {
        _documentProps: PropTypes.Requireable<any>;
        _devOnlyInvalidateCacheQueryString: PropTypes.Requireable<string>;
    };
    context: DocumentComponentContext;
    render(): JSX.Element | "__NEXT_AMP_RENDER_TARGET__";
}
export declare class NextScript extends Component<OriginProps> {
    static contextTypes: {
        _documentProps: PropTypes.Requireable<any>;
        _devOnlyInvalidateCacheQueryString: PropTypes.Requireable<string>;
    };
    static propTypes: {
        nonce: PropTypes.Requireable<string>;
        crossOrigin: PropTypes.Requireable<string>;
    };
    context: DocumentComponentContext;
    getDynamicChunks(): JSX.Element[];
    getScripts(): (JSX.Element | null)[] | null;
    static getInlineScriptSource(documentProps: DocumentProps): string;
    render(): JSX.Element | null;
}
