"use strict";exports.__esModule=true;exports.verifyTypeScriptSetup=verifyTypeScriptSetup;var _fs=_interopRequireDefault(require("fs"));var _os=_interopRequireDefault(require("os"));var _path=_interopRequireDefault(require("path"));var _chalk=_interopRequireDefault(require("chalk"));var _util=require("util");var _recursiveReaddir=require("./recursive-readdir");var _index=_interopRequireDefault(require("next/dist/compiled/resolve/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const exists=(0,_util.promisify)(_fs.default.exists);const writeFile=(0,_util.promisify)(_fs.default.writeFile);const resolveP=(req,opts)=>{return new Promise((_resolve,reject)=>{(0,_index.default)(req,opts,(err,res)=>{if(err)return reject(err);_resolve(res);});});};function writeJson(fileName,object){return writeFile(fileName,JSON.stringify(object,null,2).replace(/\n/g,_os.default.EOL)+_os.default.EOL);}async function verifyNoTypeScript(dir){const typescriptFiles=await(0,_recursiveReaddir.recursiveReadDir)(dir,/.*\.(ts|tsx)$/,/(node_modules|.*\.d\.ts)/);if(typescriptFiles.length>0){console.warn(_chalk.default.yellow(`We detected TypeScript in your project (${_chalk.default.bold(`.${typescriptFiles[0]}`)}) and created a ${_chalk.default.bold('tsconfig.json')} file for you.`));console.warn();return false;}return true;}async function verifyTypeScriptSetup(dir){let firstTimeSetup=false;const yarnLockFile=_path.default.join(dir,'yarn.lock');const tsConfigPath=_path.default.join(dir,'tsconfig.json');const toInstall=[];if(!(await exists(tsConfigPath))){if(await verifyNoTypeScript(dir)){return;}await writeJson(tsConfigPath,{});firstTimeSetup=true;}const isYarn=await exists(yarnLockFile);// Ensure TypeScript is installed
let typescriptPath='';let ts;try{await resolveP('@types/react/index.d.ts',{basedir:dir});}catch(_){toInstall.push('@types/react');}try{typescriptPath=await resolveP('typescript',{basedir:dir});ts=require(typescriptPath);}catch(_){toInstall.push('typescript');const toInstallStr=toInstall.join(' ');console.error(_chalk.default.bold.red(`It looks like you're trying to use TypeScript but do not have ${_chalk.default.bold(toInstallStr)} installed.`));console.error(_chalk.default.bold('Please install',_chalk.default.cyan.bold(toInstallStr),'by running',_chalk.default.cyan.bold((isYarn?'yarn add --dev':'npm install --save-dev')+' '+toInstallStr)+'.'));console.error(_chalk.default.bold('If you are not trying to use TypeScript, please remove the '+_chalk.default.cyan('tsconfig.json')+' file from your package root (and any TypeScript files).'));console.error();process.exit(1);return;}const compilerOptions={// These are suggested values and will be set when not present in the
// tsconfig.json
// 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()
target:{parsedValue:ts.ScriptTarget.ES5,suggested:'es5'},lib:{suggested:['dom','dom.iterable','esnext']},allowJs:{suggested:true},skipLibCheck:{suggested:true},strict:{suggested:true},forceConsistentCasingInFileNames:{suggested:true},// These values are required and cannot be changed by the user
// Keep this in sync with the webpack config
esModuleInterop:{value:true,reason:'requirement for babel'},module:{parsedValue:ts.ModuleKind.ESNext,value:'esnext',reason:'for dynamic import() support'},moduleResolution:{parsedValue:ts.ModuleResolutionKind.NodeJs,value:'node',reason:'to match webpack resolution'},resolveJsonModule:{value:true},isolatedModules:{value:true,reason:'requirement for babel'},noEmit:{value:true},jsx:{parsedValue:ts.JsxEmit.Preserve,value:'preserve'}};const formatDiagnosticHost={getCanonicalFileName:fileName=>fileName,getCurrentDirectory:ts.sys.getCurrentDirectory,getNewLine:()=>_os.default.EOL};const messages=[];let appTsConfig;let parsedTsConfig;let parsedCompilerOptions;try{const{config:readTsConfig,error}=ts.readConfigFile(tsConfigPath,ts.sys.readFile);if(error){throw new Error(ts.formatDiagnostic(error,formatDiagnosticHost));}appTsConfig=readTsConfig;// Get TS to parse and resolve any "extends"
// Calling this function also mutates the tsconfig, adding in "include" and
// "exclude", but the compilerOptions remain untouched
parsedTsConfig=JSON.parse(JSON.stringify(readTsConfig));const result=ts.parseJsonConfigFileContent(parsedTsConfig,ts.sys,_path.default.dirname(tsConfigPath));if(result.errors&&result.errors.length){throw new Error(ts.formatDiagnostic(result.errors[0],formatDiagnosticHost));}parsedCompilerOptions=result.options;}catch(e){if(e&&e.name==='SyntaxError'){console.error(_chalk.default.red.bold('Could not parse',_chalk.default.cyan('tsconfig.json')+'.','Please make sure it contains syntactically correct JSON.'));}console.info(e&&e.message?`${e.message}`:'');process.exit(1);return;}if(appTsConfig.compilerOptions==null){appTsConfig.compilerOptions={};firstTimeSetup=true;}for(const option of Object.keys(compilerOptions)){const{parsedValue,value,suggested,reason}=compilerOptions[option];const valueToCheck=parsedValue===undefined?value:parsedValue;const coloredOption=_chalk.default.cyan('compilerOptions.'+option);if(suggested!=null){if(parsedCompilerOptions[option]===undefined){appTsConfig.compilerOptions[option]=suggested;messages.push(`${coloredOption} to be ${_chalk.default.bold('suggested')} value: ${_chalk.default.cyan.bold(suggested)} (this can be changed)`);}}else if(parsedCompilerOptions[option]!==valueToCheck){appTsConfig.compilerOptions[option]=value;messages.push(`${coloredOption} ${_chalk.default.bold(valueToCheck==null?'must not':'must')} be ${valueToCheck==null?'set':_chalk.default.cyan.bold(value)}`+(reason!=null?` (${reason})`:''));}}// tsconfig will have the merged "include" and "exclude" by this point
if(parsedTsConfig.exclude==null){appTsConfig.exclude=['node_modules'];}if(parsedTsConfig.include==null){appTsConfig.include=['**/*.ts','**/*.tsx'];}if(messages.length>0){if(firstTimeSetup){console.info(_chalk.default.bold('Your',_chalk.default.cyan('tsconfig.json'),'has been populated with default values.'));console.info();}else{console.warn(_chalk.default.bold('The following changes are being made to your',_chalk.default.cyan('tsconfig.json'),'file:'));messages.forEach(message=>{console.warn('  - '+message);});console.warn();}await writeJson(tsConfigPath,appTsConfig);}if(toInstall.length>0){console.warn(_chalk.default.red(`\n${toInstall.join(' ')} ${toInstall.length===1?'is':'are'} needed when using TypeScript with Next.js. Please install ${toInstall.length===1?'it':'them'} with ${isYarn?'yarn add --dev':'npm install --save-dev'} ${toInstall.join(' ')}\n`));}}