{"version":3,"file":"static/webpack/static/development/pages/_app.js.71fef52cd2263fa3e2df.hot-update.js","sources":["webpack:///./lib/initApollo.ts","webpack:///./lib/withApollo.tsx","webpack:///./pages/_app.tsx"],"sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject\n} from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\ninterface Options {\n  getToken: () => string;\n}\n\nfunction create(initialState: any, { getToken }: Options) {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000/graphql\"\n    // credentials: \"include\"\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        cookie: token ? `qid=${token}` : \"\"\n      }\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState: any, options: Options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}\n","\nimport { ApolloClient, NormalizedCacheObject } from \"apollo-boost\";\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nimport { isBrowser } from \"./isBrowser\";\n\nfunction parseCookies(req?: any, options = {}) {\n  return cookie.parse(\n    req ? req.headers.cookie || \"\" : document.cookie,\n    options\n  );\n}\n\nexport default (App: any) => {\n  return class WithData extends React.Component {\n    static displayName = `WithData(${App.displayName})`;\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    };\n\n    static async getInitialProps(ctx: any) {\n      const {\n        Component,\n        router,\n        ctx: { req, res }\n      } = ctx;\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req).qid\n        }\n      );\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!isBrowser) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getDataFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    constructor(props: any) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};","import App, { Container } from \"next/app\";\nimport React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport withApollo from \"../lib/withApollo\";\nimport Head from \"next/head\";\nimport \"../styles/main.scss\";\n\nclass MyApp extends App<any> {\n    // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n    render() {\n        const { Component, pageProps, apolloClient } = this.props;\n        return (\n            <Container>\n                <Head>\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\"\n                    />\n                </Head>\n                <ApolloProvider client={apolloClient}>\n                    <Component {...pageProps} />\n                </ApolloProvider>\n            </Container>\n        );\n    }\n}\n\nexport default withApollo(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAIA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAuBA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA8CA;AACA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AA1DA;AA8DA;AA9DA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAmEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAJA;AASA;AACA;AA9EA;AAAA;AAAA;AAgFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjFA;AACA;AADA;AAAA;AAGA;AADA;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAjBA;AACA;AAmBA;;;;A","sourceRoot":""}