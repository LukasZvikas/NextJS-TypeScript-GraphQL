{"version":3,"file":"static/webpack/static/development/pages/register.js.7d6d4e5530a94324410b.hot-update.js","sources":["webpack:///./pages/register.tsx"],"sourcesContent":["import React, { Component, ChangeEvent, FormEvent } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { REGISTER_MUTATION } from '../graphql/auth/register';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport {\n    PASS_MISMATCH_ERROR,\n    PASS_LENGTH_ERROR,\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n} from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\nimport AuthRender from '../components/AuthRender';\nimport { withAuthPages } from '../components/withAuthPages';\nimport { InjectedProps } from '../types/authTypes';\n\n\nclass Register extends Component<InjectedProps, {}> {\n\n    validatePasswordMatch(passwordOne: string, passwordTwo: string): boolean {\n        if (passwordOne !== passwordTwo) {\n            return false;\n        }\n        return true;\n    }\n\n    validatePasswordLength(password: string): boolean {\n        if (password.length < 5) {\n            return false;\n        }\n        return true;\n    }\n\n    validateInputs(\n        { email, password, passwordConfirm }:\n            { email?: string, password?: string, passwordConfirm?: string }\n    ) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        } else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR;\n        }\n        else if (!this.validatePasswordLength(password)) {\n            return PASS_LENGTH_ERROR;\n        }\n        else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n            return PASS_MISMATCH_ERROR;\n        }\n        return null;\n    }\n\n    render() {\n        console.log('this', this.props)\n        return (\n            <AuthRender>\n                {({ handleSubmit, onInputChange, errorMessage, auth }: InjectedProps) => {\n                    return (\n                        <Layout title={'Register'}>\n                            <Mutation mutation={REGISTER_MUTATION} onError={() => { }}>\n                                {(mutate: any, { loading, error }: any) => {\n                                    if (loading) {\n                                        return <LoadingBar />;\n                                    }\n                                    return (\n                                        <div className=\"form-container d-flex flex-column justify-content-center\">\n                                            {loading && <LoadingBar />}\n                                            {error && <Alert message={error.graphQLErrors[0].message} />}\n                                            {errorMessage && <Alert message={errorMessage} />}\n                                            <div className=\"text-center heading heading-large\">Register</div>\n                                            <div className=\"row d-flex justify-content-center\">\n                                                <form\n                                                    className=\"d-flex flex-column col-10 col-sm-6 col-md-3\"\n                                                    onSubmit={handleSubmit.bind(this, { auth, mutate, validateInputs: this.validateInputs })}\n                                                >\n                                                    <InputField\n                                                        name={'email'}\n                                                        labelTitle={'Email'}\n                                                        placeholderTitle={'Enter your email'}\n                                                        onInputChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                            onInputChange(e)\n                                                        }\n                                                    />\n                                                    <InputField\n                                                        name={'password'}\n                                                        labelTitle={'Password'}\n                                                        type=\"password\"\n                                                        placeholderTitle={'Enter your password'}\n                                                        onInputChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                            onInputChange(e)\n                                                        }\n                                                    />\n                                                    <InputField\n                                                        name={'passwordConfirm'}\n                                                        labelTitle={'Confirm password'}\n                                                        type=\"password\"\n                                                        placeholderTitle={'Repeat your password'}\n                                                        onInputChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                            onInputChange(e)\n                                                        }\n                                                    />\n                                                    <ButtonPrimary title={'Sign Up'} />\n                                                </form>\n                                            </div>\n                                        </div>\n                                    );\n                                }}\n                            </Mutation>\n                        </Layout>)\n                }}\n            </AuthRender>\n        );\n    }\n}\n\nexport default withAuthPages(Register);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AAGA;;;;AA9FA;AACA;AAgGA;;;;A","sourceRoot":""}