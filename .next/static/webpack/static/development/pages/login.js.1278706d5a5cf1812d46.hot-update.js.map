{"version":3,"file":"static/webpack/static/development/pages/login.js.1278706d5a5cf1812d46.hot-update.js","sources":["webpack:///./graphql/auth/login.tsx","webpack:///./pages/login.tsx"],"sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const LOGIN_MUTATION = gql`\n    mutation Login($email: String!, $password: String!) {\n        loginUser(email: $email, password: $email) {\n            token\n            userId\n            email\n        }\n    }\n`;\n","import React, { Component, ChangeEvent, Fragment } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { LOGIN_MUTATION } from '../graphql/auth/login';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport {\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n} from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\n\ninterface LoginState {\n    email: string;\n    password: string;\n    errorMessage: string;\n}\n\nclass Login extends Component<{}, LoginState> {\n\n    state = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        errorMessage: ''\n    };\n\n    handleSubmit(login: any, event: any) {\n        const { email, password, passwordConfirm } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(\n            email,\n            password,\n            passwordConfirm\n        );\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        login({ variables: { email, password } });\n    }\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: '' });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ password: value });\n    }\n\n    validateInputs(email: string, password: string, passwordConfirm: string) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        } else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR;\n        }\n        return null;\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n\n        return (\n            <Layout title={'Login'}>\n                <Mutation mutation={LOGIN_MUTATION} onError={() => { }}>\n                    {(register: any, { loading, error }: any) => {\n                        if (loading) {\n                            return <LoadingBar />;\n                        }\n                        return (\n                            <Fragment>\n                                {error ? (\n                                    <Alert message={error.graphQLErrors[0].message} />\n                                ) : null}\n                                {errorMessage ? <Alert message={errorMessage} /> : null}\n                                <div>Register</div>\n                                <div className=\"row d-flex justify-content-center\">\n                                    <form\n                                        className=\"d-flex flex-column col-10 col-sm-6 col-md-4\"\n                                        onSubmit={this.handleSubmit.bind(this, register)}\n                                    >\n                                        <InputField\n                                            labelTitle={'Email'}\n                                            placeholderTitle={'Enter your email'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onEmailChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Enter your password'}\n                                            onTextChange={\n                                                (e: ChangeEvent<HTMLInputElement>) =>\n                                                    this.onPasswordChange(e.target.value)\n                                            }\n                                        />\n                                        <ButtonPrimary title={'Login'} />\n                                    </form>\n                                </div>\n                            </Fragment>\n                        );\n                    }}\n                </Mutation>\n            </Layout>\n        );\n    }\n}\n\nexport default Login;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;;;;AAtGA;AACA;AAwGA;;;;A","sourceRoot":""}