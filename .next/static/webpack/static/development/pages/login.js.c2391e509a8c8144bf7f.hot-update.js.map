{"version":3,"file":"static/webpack/static/development/pages/login.js.c2391e509a8c8144bf7f.hot-update.js","sources":["webpack:///./pages/login.tsx"],"sourcesContent":["import React, { Component, ChangeEvent } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { LOGIN_MUTATION } from '../graphql/auth/login';\nimport { Mutation } from 'react-apollo';\nimport { UNFILLED_FIELDS_ERROR } from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\nimport Router from 'next/router';\nimport { GET_USER_QUERY } from '../graphql/auth/getUser';\nimport redirect from '../lib/redirect';\n\ninterface LoginState {\n    email: string;\n    password: string;\n    errorMessage: string;\n}\n\ninterface LoginProps {\n    user: {\n        email: string;\n        _id: string;\n    };\n    data: any\n}\n\nclass Login extends Component<LoginProps, LoginState> {\n\n    static async getInitialProps(context: any) {\n        return context.apolloClient.query({\n            query: GET_USER_QUERY\n        }).then((res: any) => {\n            console.log('res.data', res.data);\n            if (res.data.getUser) {\n                redirect(context, '/');\n                return { user: res.data.getUser };\n            }\n        })\n            .catch((e: any) => {\n                console.log('e', e)\n                return { user: {} };\n            });\n    };\n\n    state = {\n        email: '',\n        password: '',\n        errorMessage: ''\n    };\n\n    handleSubmit(login: any, event: any) {\n        const { email, password } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(email, password);\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        login({ variables: { email, password } });\n    }\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: '' });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ password: value });\n    }\n\n    validateInputs(email: string, password: string) {\n        if (!email || !password) {\n            return UNFILLED_FIELDS_ERROR;\n        }\n        return null;\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n        console.log('this', this.props)\n        return (\n            <Layout title={'Login'}>\n                <Mutation mutation={LOGIN_MUTATION} onError={() => { }}>\n                    {(login: any, { loading, error, data }: any) => {\n                        if (!error && data) {\n                            Router.push('/');\n                        }\n\n                        return (\n                            <div className=\"form-container d-flex flex-column justify-content-center\">\n                                {loading && <LoadingBar />}\n                                {error && <Alert message={error.graphQLErrors[0].message} />}\n                                {errorMessage && <Alert message={errorMessage} />}\n                                <div className=\"text-center heading heading-large\">Login</div>\n                                <div className=\"row d-flex justify-content-center\">\n                                    <form\n                                        className=\"d-flex flex-column col-10 col-sm-8 col-md-3\"\n                                        onSubmit={this.handleSubmit.bind(this, login)}\n                                    >\n                                        <InputField\n                                            labelTitle={'Email'}\n                                            placeholderTitle={'Enter your email'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onEmailChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Enter your password'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onPasswordChange(e.target.value)\n                                            }\n                                        />\n                                        <ButtonPrimary title={'Login'} />\n                                    </form>\n                                </div>\n                            </div>\n                        );\n                    }}\n                </Mutation>\n            </Layout>\n        );\n    }\n}\n\nexport default Login;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AAHA;AACA;;;;;;AAKA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;;;;;;AA5GA;;;;;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AAhBA;AACA;AAgHA;;;;A","sourceRoot":""}