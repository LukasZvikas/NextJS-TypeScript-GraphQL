{"version":3,"file":"static/webpack/static/development/pages/register.js.29ee4dd50a457bb41090.hot-update.js","sources":["webpack:///./pages/register.tsx"],"sourcesContent":["import React, { Component, ChangeEvent, Fragment } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { InputField } from \"../components/InputField\";\nimport { REGISTER_MUTATION } from \"../graphql/auth/register\";\nimport { Mutation } from \"react-apollo\";\nimport { validateEmail } from \"../utilities/emailValidation\";\nimport {\n    PASS_MISMATCH_ERROR,\n    PASS_LENGTH_ERROR,\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n}\n    from \"../utilities/errorMessages\";\nimport { Alert } from \"../components/Alert\";\nimport { ButtonPrimary } from \"../components/ButtonPrimary\";\nimport { LoadingBar } from \"../components/LoadingBar\";\n\ninterface RegisterState {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n    errorMessage: string;\n}\n\nclass Register extends Component<{}, RegisterState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = { email: \"\", password: \"\", passwordConfirm: \"\", errorMessage: \"\" };\n    }\n\n    handleSubmit(register: any, event: any) {\n        const { email, password, passwordConfirm } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(email, password, passwordConfirm);\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        register({ variables: { email, password } });\n\n    }\n\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: \"\" });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) this.clearErrorMessage();\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) this.clearErrorMessage();\n        this.setState({ password: value });\n    }\n\n    onPasswordConfirmChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) this.clearErrorMessage();\n        this.setState({ passwordConfirm: value });\n    }\n\n    validatePasswordMatch(passwordOne: string, passwordTwo: string): boolean {\n        if (passwordOne !== passwordTwo) return false;\n        return true;\n    }\n\n    validatePasswordLength(password: string): boolean {\n        if (password.length < 5) return false;\n        return true;\n    }\n\n    validateInputs(email: string, password: string, passwordConfirm: string) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        }\n        else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR\n        }\n        else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n            return PASS_MISMATCH_ERROR;\n        }\n        else if (!this.validatePasswordLength(password)) {\n            return PASS_LENGTH_ERROR;\n        }\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n\n        return (\n            <Layout title={\"Register\"}>\n                <Mutation mutation={REGISTER_MUTATION}>\n                    {(register: any, { loading, error, errors }: any) => {\n\n                        if (loading) return <LoadingBar />;\n\n                        if (error) console.log(\"err\", error);\n\n                        return (<Fragment>\n                            {error ? <Alert message={error.graphQLErrors[0].message} /> : null}\n                            {errorMessage ? <Alert message={errorMessage} /> : null}\n                            <div>Register</div>\n                            <div className=\"row d-flex justify-content-center\">\n                                <form\n                                    className=\"d-flex flex-column col-10 col-sm-6 col-md-4\"\n                                    onSubmit={this.handleSubmit.bind(this, register)}\n                                >\n                                    <InputField\n                                        labelTitle={\"Email\"}\n                                        placeholderTitle={\"Enter your email\"}\n                                        onTextChange={(e: ChangeEvent<HTMLInputElement>) => this.onEmailChange(e.target.value)}\n                                    />\n                                    <InputField\n                                        labelTitle={\"Password\"}\n                                        type=\"password\"\n                                        placeholderTitle={\"Enter your password\"}\n                                        onTextChange={(e: ChangeEvent<HTMLInputElement>) => this.onPasswordChange(e.target.value)}\n                                    />\n                                    <InputField\n                                        labelTitle={\"Confirm password\"}\n                                        type=\"password\"\n                                        placeholderTitle={\"Repeat your password\"}\n                                        onTextChange={(e: ChangeEvent<HTMLInputElement>) => this.onPasswordConfirmChange(e.target.value)}\n                                    />\n                                    <ButtonPrimary title={\"Sign Up\"} />\n                                </form>\n                            </div>\n                        </Fragment>)\n                    }}\n                </Mutation>\n            </Layout >);\n    }\n}\n\nexport default Register;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAQA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;;;;AAlHA;AACA;AAoHA;;;;A","sourceRoot":""}