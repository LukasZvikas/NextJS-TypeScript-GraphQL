{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/login.tsx\";\nimport React, { Component, Fragment } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { LOGIN_MUTATION } from '../graphql/auth/login';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport { INVALID_EMAIL_ERROR, UNFILLED_FIELDS_ERROR } from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Login)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(login, event) {\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n      event.preventDefault();\n      var isInvalidInputs = this.validateInputs(email, password, passwordConfirm);\n\n      if (isInvalidInputs) {\n        this.setState({\n          errorMessage: isInvalidInputs\n        });\n        return;\n      }\n\n      login({\n        variables: {\n          email: email,\n          password: password\n        }\n      });\n    }\n  }, {\n    key: \"clearErrorMessage\",\n    value: function clearErrorMessage() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"onEmailChange\",\n    value: function onEmailChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        email: value\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        password: value\n      });\n    }\n  }, {\n    key: \"validateInputs\",\n    value: function validateInputs(email, password, passwordConfirm) {\n      if (!email || !password || !passwordConfirm) {\n        return UNFILLED_FIELDS_ERROR;\n      } else if (!validateEmail(email)) {\n        return INVALID_EMAIL_ERROR;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errorMessage = this.state.errorMessage;\n      return React.createElement(Layout, {\n        title: 'Login',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: LOGIN_MUTATION,\n        onError: function onError() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, function (register, _ref) {\n        var loading = _ref.loading,\n            error = _ref.error;\n\n        if (loading) {\n          return React.createElement(LoadingBar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, error ? React.createElement(Alert, {\n          message: error.graphQLErrors[0].message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }) : null, errorMessage ? React.createElement(Alert, {\n          message: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }) : null, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Register\"), React.createElement(\"div\", {\n          className: \"row d-flex justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"d-flex flex-column col-10 col-sm-6 col-md-4\",\n          onSubmit: _this2.handleSubmit.bind(_this2, register),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(InputField, {\n          labelTitle: 'Email',\n          placeholderTitle: 'Enter your email',\n          onTextChange: function onTextChange(e) {\n            return _this2.onEmailChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(InputField, {\n          labelTitle: 'Password',\n          type: \"password\",\n          placeholderTitle: 'Enter your password',\n          onTextChange: function onTextChange(e) {\n            return _this2.onPasswordChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }), React.createElement(ButtonPrimary, {\n          title: 'Login',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }))));\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/login.tsx"],"names":["React","Component","Fragment","Layout","InputField","LOGIN_MUTATION","Mutation","validateEmail","INVALID_EMAIL_ERROR","UNFILLED_FIELDS_ERROR","Alert","ButtonPrimary","LoadingBar","Login","email","password","passwordConfirm","errorMessage","login","event","state","preventDefault","isInvalidInputs","validateInputs","setState","variables","value","clearErrorMessage","register","loading","error","graphQLErrors","message","handleSubmit","bind","e","onEmailChange","target","onPasswordChange"],"mappings":"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","sourcesContent":["import React, { Component, ChangeEvent, Fragment } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { LOGIN_MUTATION } from '../graphql/auth/login';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport {\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n} from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\n\ninterface LoginState {\n    email: string;\n    password: string;\n    errorMessage: string;\n}\n\nclass Login extends Component<{}, LoginState> {\n\n    state = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        errorMessage: ''\n    };\n\n    handleSubmit(login: any, event: any) {\n        const { email, password, passwordConfirm } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(\n            email,\n            password,\n            passwordConfirm\n        );\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        login({ variables: { email, password } });\n    }\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: '' });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ password: value });\n    }\n\n    validateInputs(email: string, password: string, passwordConfirm: string) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        } else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR;\n        }\n        return null;\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n\n        return (\n            <Layout title={'Login'}>\n                <Mutation mutation={LOGIN_MUTATION} onError={() => { }}>\n                    {(register: any, { loading, error }: any) => {\n                        if (loading) {\n                            return <LoadingBar />;\n                        }\n                        return (\n                            <Fragment>\n                                {error ? (\n                                    <Alert message={error.graphQLErrors[0].message} />\n                                ) : null}\n                                {errorMessage ? <Alert message={errorMessage} /> : null}\n                                <div>Register</div>\n                                <div className=\"row d-flex justify-content-center\">\n                                    <form\n                                        className=\"d-flex flex-column col-10 col-sm-6 col-md-4\"\n                                        onSubmit={this.handleSubmit.bind(this, register)}\n                                    >\n                                        <InputField\n                                            labelTitle={'Email'}\n                                            placeholderTitle={'Enter your email'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onEmailChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Enter your password'}\n                                            onTextChange={\n                                                (e: ChangeEvent<HTMLInputElement>) =>\n                                                    this.onPasswordChange(e.target.value)\n                                            }\n                                        />\n                                        <ButtonPrimary title={'Login'} />\n                                    </form>\n                                </div>\n                            </Fragment>\n                        );\n                    }}\n                </Mutation>\n            </Layout>\n        );\n    }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}