{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/lib/withApollo.tsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport { isBrowser } from './isBrowser';\n\nfunction parseCookies(req) {\n  return req ? req.headers.cookie : '';\n}\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return parseCookies(req);\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (isBrowser) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 54\n                    },\n                    __self: this\n                  })));\n\n                case 14:\n                  _context.next = 20;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.log('please');\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 20:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 21:\n                  // Extract query data from the Apollo's store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 23:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies();\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(App.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/lib/withApollo.tsx"],"names":["React","PropTypes","getDataFromTree","Head","initApollo","isBrowser","parseCookies","req","headers","cookie","App","ctx","Component","router","res","apollo","getToken","apolloClient","appProps","getInitialProps","finished","console","log","error","rewind","apolloState","cache","extract","props","displayName","object","isRequired"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAiC;AAC/B,SAAOA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYC,MAAf,GAAwB,EAAlC;AACD;;AAED,gBAAe,UAACC,GAAD,EAAc;AAAA;;AAC3B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAM+BC,GAN/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQMC,kBAAAA,SARN,GAWQD,GAXR,CAQMC,SARN,EASMC,MATN,GAWQF,GAXR,CASME,MATN,aAWQF,GAXR,CAUMA,GAVN,EAUaJ,GAVb,YAUaA,GAVb,EAUkBO,GAVlB,YAUkBA,GAVlB;AAaUC,kBAAAA,MAbV,GAamBX,UAAU,CACvB,EADuB,EAEvB;AACEY,oBAAAA,QAAQ,EAAE;AAAA,6BAAMV,YAAY,CAACC,GAAD,CAAlB;AAAA;AADZ,mBAFuB,CAb7B;AAoBII,kBAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBF,MAAvB;AAEIG,kBAAAA,QAtBR,GAsBmB,EAtBnB;;AAAA,uBAuBQR,GAAG,CAACS,eAvBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAwBuBT,GAAG,CAACS,eAAJ,CAAoBR,GAApB,CAxBvB;;AAAA;AAwBMO,kBAAAA,QAxBN;;AAAA;AAAA,wBA2BQJ,GAAG,IAAIA,GAAG,CAACM,QA3BnB;AAAA;AAAA;AAAA;;AAAA,mDA8Ba,EA9Bb;;AAAA;AAAA,sBAiCSf,SAjCT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAsCcH,eAAe,CACnB,oBAAC,GAAD,eACMgB,QADN;AAEE,oBAAA,SAAS,EAAEN,SAFb;AAGE,oBAAA,MAAM,EAAEC,MAHV;AAIE,oBAAA,YAAY,EAAEE,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CAtC7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+CQ;AACA;AACA;AACAM,kBAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,kBAAAA,OAAO,CAACE,KAAR,CAAc,uCAAd;;AAnDR;AAsDM;AACA;AACApB,kBAAAA,IAAI,CAACqB,MAAL;;AAxDN;AA2DI;AACMC,kBAAAA,WA5DV,GA4DwBV,MAAM,CAACW,KAAP,CAAaC,OAAb,EA5DxB;AAAA,qEA+DST,QA/DT;AAgEMO,oBAAAA,WAAW,EAAXA;AAhEN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqEE,sBAAYG,KAAZ,EAAwB;AAAA;;AAAA;;AACtB,oFAAMA,KAAN,GADsB,CAEtB;AACA;;AAHsB;;AAItB,YAAKX,YAAL,GAAoBb,UAAU,CAACwB,KAAK,CAACH,WAAP,EAAoB;AAChDT,QAAAA,QAAQ,EAAE,oBAAM;AACd,iBAAOV,YAAY,EAAnB;AACD;AAH+C,OAApB,CAA9B;AAJsB;AASvB;;AA9EH;AAAA;AAAA,+BAgFW;AACP,eAAO,oBAAC,GAAD,eAAS,KAAKsB,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKX,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AAlFH;;AAAA;AAAA,IAA8BjB,KAAK,CAACY,SAApC,6DACmCF,GAAG,CAACmB,WADvC,8CAEqB;AACjBJ,IAAAA,WAAW,EAAExB,SAAS,CAAC6B,MAAV,CAAiBC;AADb,GAFrB;AAoFD,CArFD","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\nimport { NormalizedCacheObject, ApolloClient } from 'apollo-boost';\n\nimport initApollo from './initApollo'\nimport { isBrowser } from './isBrowser';\n\nfunction parseCookies(req?: any) {\n  return req ? req.headers.cookie : '';\n}\n\nexport default (App: any) => {\n  return class WithData extends React.Component {\n    static displayName = `WithData(${App.displayName})`\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps(ctx: any) {\n      const {\n        Component,\n        router,\n        ctx: { req, res }\n      } = ctx;\n\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req)\n        }\n      )\n\n      ctx.ctx.apolloClient = apollo\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {}\n      }\n\n      if (!isBrowser) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.log('please');\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n    apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    constructor(props: any) {\n      super(props)\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies()\n        }\n      })\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}