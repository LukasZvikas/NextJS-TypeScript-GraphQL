{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/register.tsx\";\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { REGISTER_MUTATION } from '../graphql/auth/register';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport { PASS_MISMATCH_ERROR, PASS_LENGTH_ERROR, INVALID_EMAIL_ERROR, UNFILLED_FIELDS_ERROR } from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\nimport Router from 'next/router';\nimport { GET_USER_QUERY } from '../graphql/auth/getUser';\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var user = this.props.user;\n\n      if (user) {\n        Router.push('/');\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(register, event) {\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n      event.preventDefault();\n      var isInvalidInputs = this.validateInputs(email, password, passwordConfirm);\n\n      if (isInvalidInputs) {\n        this.setState({\n          errorMessage: isInvalidInputs\n        });\n        return;\n      }\n\n      register({\n        variables: {\n          email: email,\n          password: password\n        }\n      });\n    }\n  }, {\n    key: \"clearErrorMessage\",\n    value: function clearErrorMessage() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"onEmailChange\",\n    value: function onEmailChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        email: value\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        password: value\n      });\n    }\n  }, {\n    key: \"onPasswordConfirmChange\",\n    value: function onPasswordConfirmChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        passwordConfirm: value\n      });\n    }\n  }, {\n    key: \"validatePasswordMatch\",\n    value: function validatePasswordMatch(passwordOne, passwordTwo) {\n      if (passwordOne !== passwordTwo) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validatePasswordLength\",\n    value: function validatePasswordLength(password) {\n      if (password.length < 5) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validateInputs\",\n    value: function validateInputs(email, password, passwordConfirm) {\n      if (!email || !password || !passwordConfirm) {\n        return UNFILLED_FIELDS_ERROR;\n      } else if (!validateEmail(email)) {\n        return INVALID_EMAIL_ERROR;\n      } else if (!this.validatePasswordLength(password)) {\n        return PASS_LENGTH_ERROR;\n      } else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n        return PASS_MISMATCH_ERROR;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errorMessage = this.state.errorMessage;\n      console.log('this', this.props);\n      return React.createElement(Layout, {\n        title: 'Register',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: REGISTER_MUTATION,\n        onError: function onError() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, function (register, _ref) {\n        var loading = _ref.loading,\n            error = _ref.error;\n\n        if (loading) {\n          return React.createElement(LoadingBar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(\"div\", {\n          className: \"form-container d-flex flex-column justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, loading && React.createElement(LoadingBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }), error && React.createElement(Alert, {\n          message: error.graphQLErrors[0].message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }), errorMessage && React.createElement(Alert, {\n          message: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"text-center heading heading-large\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Register\"), React.createElement(\"div\", {\n          className: \"row d-flex justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"d-flex flex-column col-10 col-sm-6 col-md-3\",\n          onSubmit: _this2.handleSubmit.bind(_this2, register),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(InputField, {\n          labelTitle: 'Email',\n          placeholderTitle: 'Enter your email',\n          onTextChange: function onTextChange(e) {\n            return _this2.onEmailChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }), React.createElement(InputField, {\n          labelTitle: 'Password',\n          type: \"password\",\n          placeholderTitle: 'Enter your password',\n          onTextChange: function onTextChange(e) {\n            return _this2.onPasswordChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }), React.createElement(InputField, {\n          labelTitle: 'Confirm password',\n          type: \"password\",\n          placeholderTitle: 'Repeat your password',\n          onTextChange: function onTextChange(e) {\n            return _this2.onPasswordConfirmChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }), React.createElement(ButtonPrimary, {\n          title: 'Sign Up',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }))));\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(context) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", context.apolloClient.query({\n                  query: GET_USER_QUERY\n                }).then(function (res) {\n                  console.log('res.data', res.data);\n\n                  if (res.data.getUser) {\n                    return {\n                      user: res.data.getUser\n                    };\n                  }\n                }).catch(function (e) {\n                  console.log('error is', e);\n                  return {\n                    user: {}\n                  };\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Register;\n}(Component);\n\nexport default Register;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/register.tsx"],"names":["React","Component","Layout","InputField","REGISTER_MUTATION","Mutation","validateEmail","PASS_MISMATCH_ERROR","PASS_LENGTH_ERROR","INVALID_EMAIL_ERROR","UNFILLED_FIELDS_ERROR","Alert","ButtonPrimary","LoadingBar","Router","GET_USER_QUERY","Register","email","password","passwordConfirm","errorMessage","user","props","push","register","event","state","preventDefault","isInvalidInputs","validateInputs","setState","variables","value","clearErrorMessage","passwordOne","passwordTwo","length","validatePasswordLength","validatePasswordMatch","console","log","loading","error","graphQLErrors","message","handleSubmit","bind","e","onEmailChange","target","onPasswordChange","onPasswordConfirmChange","context","apolloClient","query","then","res","data","getUser","catch"],"mappings":"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","sourcesContent":["import React, { Component, ChangeEvent } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { REGISTER_MUTATION } from '../graphql/auth/register';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport {\n    PASS_MISMATCH_ERROR,\n    PASS_LENGTH_ERROR,\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n} from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\nimport Router from 'next/router';\nimport { GET_USER_QUERY } from '../graphql/auth/getUser';\nimport redirect from '../lib/redirect';\n\ninterface RegisterState {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n    errorMessage: string;\n}\n\ninterface RegisterProps {\n    user: {\n        email: string;\n        _id: string;\n    }\n}\n\nclass Register extends Component<RegisterProps, RegisterState> {\n\n    static async getInitialProps(context: any) {\n        return context.apolloClient.query({\n            query: GET_USER_QUERY\n        }).then((res: any) => {\n            console.log('res.data', res.data);\n            if (res.data.getUser) {\n\n                return { user: res.data.getUser };\n            }\n        })\n            .catch((e: any) => {\n                console.log('error is', e)\n                return { user: {} };\n            });\n    };\n\n    state = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        errorMessage: ''\n    };\n\n    componentDidMount() {\n        const { user } = this.props;\n\n        if (user) {\n            Router.push('/');\n        }\n    }\n\n    handleSubmit(register: any, event: any) {\n        const { email, password, passwordConfirm } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(\n            email,\n            password,\n            passwordConfirm\n        );\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        register({ variables: { email, password } });\n    }\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: '' });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ password: value });\n    }\n\n    onPasswordConfirmChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ passwordConfirm: value });\n    }\n\n    validatePasswordMatch(passwordOne: string, passwordTwo: string): boolean {\n        if (passwordOne !== passwordTwo) {\n            return false;\n        }\n        return true;\n    }\n\n    validatePasswordLength(password: string): boolean {\n        if (password.length < 5) {\n            return false;\n        }\n        return true;\n    }\n\n    validateInputs(email: string, password: string, passwordConfirm: string) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        } else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR;\n        }\n        else if (!this.validatePasswordLength(password)) {\n            return PASS_LENGTH_ERROR;\n        }\n        else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n            return PASS_MISMATCH_ERROR;\n        }\n        return null;\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n        console.log('this', this.props)\n        return (\n            <Layout title={'Register'}>\n                <Mutation mutation={REGISTER_MUTATION} onError={() => { }}>\n                    {(register: any, { loading, error }: any) => {\n                        if (loading) {\n                            return <LoadingBar />;\n                        }\n                        return (\n                            <div className=\"form-container d-flex flex-column justify-content-center\">\n                                {loading && <LoadingBar />}\n                                {error && <Alert message={error.graphQLErrors[0].message} />}\n                                {errorMessage && <Alert message={errorMessage} />}\n                                <div className=\"text-center heading heading-large\">Register</div>\n                                <div className=\"row d-flex justify-content-center\">\n                                    <form\n                                        className=\"d-flex flex-column col-10 col-sm-6 col-md-3\"\n                                        onSubmit={this.handleSubmit.bind(this, register)}\n                                    >\n                                        <InputField\n                                            labelTitle={'Email'}\n                                            placeholderTitle={'Enter your email'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onEmailChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Enter your password'}\n                                            onTextChange={\n                                                (e: ChangeEvent<HTMLInputElement>) =>\n                                                    this.onPasswordChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Confirm password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Repeat your password'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onPasswordConfirmChange(e.target.value)\n                                            }\n                                        />\n                                        <ButtonPrimary title={'Sign Up'} />\n                                    </form>\n                                </div>\n                            </div>\n                        );\n                    }}\n                </Mutation>\n            </Layout>\n        );\n    }\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}