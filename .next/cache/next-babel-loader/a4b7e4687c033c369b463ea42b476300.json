{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/register.tsx\";\nimport React, { Component, Fragment } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { REGISTER_MUTATION } from '../graphql/auth/register';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport { PASS_MISMATCH_ERROR, PASS_LENGTH_ERROR, INVALID_EMAIL_ERROR, UNFILLED_FIELDS_ERROR } from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n    _this.state = {\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(register, event) {\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n      event.preventDefault();\n      var isInvalidInputs = this.validateInputs(email, password, passwordConfirm);\n\n      if (isInvalidInputs) {\n        this.setState({\n          errorMessage: isInvalidInputs\n        });\n        return;\n      }\n\n      register({\n        variables: {\n          email: email,\n          password: password\n        }\n      });\n    }\n  }, {\n    key: \"clearErrorMessage\",\n    value: function clearErrorMessage() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"onEmailChange\",\n    value: function onEmailChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        email: value\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(event) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        password: event.target.value\n      });\n    }\n  }, {\n    key: \"onPasswordConfirmChange\",\n    value: function onPasswordConfirmChange(value) {\n      var errorMessage = this.state.errorMessage;\n\n      if (errorMessage) {\n        this.clearErrorMessage();\n      }\n\n      this.setState({\n        passwordConfirm: value\n      });\n    }\n  }, {\n    key: \"validatePasswordMatch\",\n    value: function validatePasswordMatch(passwordOne, passwordTwo) {\n      if (passwordOne !== passwordTwo) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validatePasswordLength\",\n    value: function validatePasswordLength(password) {\n      if (password.length < 5) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validateInputs\",\n    value: function validateInputs(email, password, passwordConfirm) {\n      if (!email || !password || !passwordConfirm) {\n        return UNFILLED_FIELDS_ERROR;\n      } else if (!validateEmail(email)) {\n        return INVALID_EMAIL_ERROR;\n      } else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n        return PASS_MISMATCH_ERROR;\n      } else if (!this.validatePasswordLength(password)) {\n        return PASS_LENGTH_ERROR;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errorMessage = this.state.errorMessage;\n      return React.createElement(Layout, {\n        title: 'Register',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: REGISTER_MUTATION,\n        onError: function onError() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, function (register, _ref) {\n        var loading = _ref.loading,\n            error = _ref.error;\n\n        if (loading) {\n          return React.createElement(LoadingBar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          });\n        }\n\n        if (error) {\n          console.log('err', error.graphQLErrors[0].message);\n        }\n\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, error ? React.createElement(Alert, {\n          message: error.graphQLErrors[0].message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }) : null, errorMessage ? React.createElement(Alert, {\n          message: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }) : null, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Register\"), React.createElement(\"div\", {\n          className: \"row d-flex justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"d-flex flex-column col-10 col-sm-6 col-md-4\",\n          onSubmit: _this2.handleSubmit.bind(_this2, register),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(InputField, {\n          labelTitle: 'Email',\n          placeholderTitle: 'Enter your email',\n          onTextChange: function onTextChange(e) {\n            return _this2.onEmailChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), React.createElement(InputField, {\n          labelTitle: 'Password',\n          type: \"password\",\n          placeholderTitle: 'Enter your password',\n          onTextChange: _this2.onPasswordChange.bind(_this2, value),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }), React.createElement(InputField, {\n          labelTitle: 'Confirm password',\n          type: \"password\",\n          placeholderTitle: 'Repeat your password',\n          onTextChange: function onTextChange(e) {\n            return _this2.onPasswordConfirmChange(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }), React.createElement(ButtonPrimary, {\n          title: 'Sign Up',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }))));\n      }));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nexport default Register;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/nextjs-graphql-typescript/pages/register.tsx"],"names":["React","Component","Fragment","Layout","InputField","REGISTER_MUTATION","Mutation","validateEmail","PASS_MISMATCH_ERROR","PASS_LENGTH_ERROR","INVALID_EMAIL_ERROR","UNFILLED_FIELDS_ERROR","Alert","ButtonPrimary","LoadingBar","Register","props","state","email","password","passwordConfirm","errorMessage","register","event","preventDefault","isInvalidInputs","validateInputs","setState","variables","value","clearErrorMessage","target","passwordOne","passwordTwo","length","validatePasswordMatch","validatePasswordLength","loading","error","console","log","graphQLErrors","message","handleSubmit","bind","e","onEmailChange","onPasswordChange","onPasswordConfirmChange"],"mappings":"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","sourcesContent":["import React, { Component, ChangeEvent, Fragment } from 'react';\nimport Layout from '../components/Layout';\nimport { InputField } from '../components/InputField';\nimport { REGISTER_MUTATION } from '../graphql/auth/register';\nimport { Mutation } from 'react-apollo';\nimport { validateEmail } from '../utilities/emailValidation';\nimport {\n    PASS_MISMATCH_ERROR,\n    PASS_LENGTH_ERROR,\n    INVALID_EMAIL_ERROR,\n    UNFILLED_FIELDS_ERROR\n} from '../utilities/errorMessages';\nimport { Alert } from '../components/Alert';\nimport { ButtonPrimary } from '../components/ButtonPrimary';\nimport { LoadingBar } from '../components/LoadingBar';\n\ninterface RegisterState {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n    errorMessage: string;\n}\n\nclass Register extends Component<{}, RegisterState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            passwordConfirm: '',\n            errorMessage: ''\n        };\n    }\n\n    handleSubmit(register: any, event: any) {\n        const { email, password, passwordConfirm } = this.state;\n\n        event.preventDefault();\n\n        const isInvalidInputs = this.validateInputs(\n            email,\n            password,\n            passwordConfirm\n        );\n        if (isInvalidInputs) {\n            this.setState({ errorMessage: isInvalidInputs });\n            return;\n        }\n        register({ variables: { email, password } });\n    }\n\n    clearErrorMessage() {\n        this.setState({ errorMessage: '' });\n    }\n\n    onEmailChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ email: value });\n    }\n\n    onPasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ password: event.target.value });\n    }\n\n    onPasswordConfirmChange(value: string): void {\n        const { errorMessage } = this.state;\n        if (errorMessage) {\n            this.clearErrorMessage();\n        }\n        this.setState({ passwordConfirm: value });\n    }\n\n    validatePasswordMatch(passwordOne: string, passwordTwo: string): boolean {\n        if (passwordOne !== passwordTwo) {\n            return false;\n        }\n        return true;\n    }\n\n    validatePasswordLength(password: string): boolean {\n        if (password.length < 5) {\n            return false;\n        }\n        return true;\n    }\n\n    validateInputs(email: string, password: string, passwordConfirm: string) {\n        if (!email || !password || !passwordConfirm) {\n            return UNFILLED_FIELDS_ERROR;\n        } else if (!validateEmail(email)) {\n            return INVALID_EMAIL_ERROR;\n        } else if (!this.validatePasswordMatch(password, passwordConfirm)) {\n            return PASS_MISMATCH_ERROR;\n        } else if (!this.validatePasswordLength(password)) {\n            return PASS_LENGTH_ERROR;\n        }\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n\n        return (\n            <Layout title={'Register'}>\n                <Mutation mutation={REGISTER_MUTATION} onError={() => { }}>\n                    {(register: any, { loading, error }: any) => {\n                        if (loading) {\n                            return <LoadingBar />;\n                        }\n\n                        if (error) {\n                            console.log('err', error.graphQLErrors[0].message);\n                        }\n\n                        return (\n                            <Fragment>\n                                {error ? (\n                                    <Alert message={error.graphQLErrors[0].message} />\n                                ) : null}\n                                {errorMessage ? <Alert message={errorMessage} /> : null}\n                                <div>Register</div>\n                                <div className=\"row d-flex justify-content-center\">\n                                    <form\n                                        className=\"d-flex flex-column col-10 col-sm-6 col-md-4\"\n                                        onSubmit={this.handleSubmit.bind(this, register)}\n                                    >\n                                        <InputField\n                                            labelTitle={'Email'}\n                                            placeholderTitle={'Enter your email'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onEmailChange(e.target.value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Enter your password'}\n                                            onTextChange={\n                                                this.onPasswordChange.bind(this, value)\n                                            }\n                                        />\n                                        <InputField\n                                            labelTitle={'Confirm password'}\n                                            type=\"password\"\n                                            placeholderTitle={'Repeat your password'}\n                                            onTextChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                                this.onPasswordConfirmChange(e.target.value)\n                                            }\n                                        />\n                                        <ButtonPrimary title={'Sign Up'} />\n                                    </form>\n                                </div>\n                            </Fragment>\n                        );\n                    }}\n                </Mutation>\n            </Layout>\n        );\n    }\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}